package SdB::App;
use Dancer2;

our $VERSION = '0.1';

get '/DANCER' => sub {
    template 'index' => { 'title' => 'SdB::App' };
};

###
use Dancer2; 
use DBI;
use File::Spec;
use File::Slurper qw/ read_text /;
use Template;
use Data::Dumper;
###
my $date = create_date();
my $dbFlag = "DB_CREATED_FILE.txt";
my $database = testForFile($dbFlag);
###
my %hash;
my @AoA = ();
my @array;
my $key;
my $line;
my $ii = 1;
#my $actions = {
#               'none' => sub { my $key = "1"; $hash{ $array[4] }{$key} = [ @array ]; },
#               $hash{ $array[0] } => sub { my $key = create_entry_time(); $key = $key+$ii; $hash{ $array[0] }{$key} = [ @array ]; },
#               '_DEFAULT_' => sub { die "Unrecognized token '$_[0]'; aborting\n" }
#
#};
###
#set 'database'     => File::Spec->catfile(File::Spec->tmpdir(), 'dancr.db');
set 'database'     => File::Spec->catfile(File::Spec->tmpdir(), $database);
set 'session'      => 'Simple';
set 'template'     => 'template_toolkit';
set 'logger'       => 'console';
set 'log'          => 'debug';
set 'show_errors'  => 1;
set 'startup_info' => 1;
set 'warnings'     => 1;
set 'username'     => 'admin';
set 'password'     => 'password';
set 'layout'       => 'main';

my $flash;

sub set_flash {
    my $message = shift;
    $flash = $message;
}

sub get_flash {
    my $msg = $flash;
    $flash = "";
    return $msg;
}

sub connect_db {
    my $dbh = DBI->connect("dbi:SQLite:dbname=".setting('database')) or
        die $DBI::errstr;
    return $dbh;
}

sub init_db {
    my $db = connect_db();
    my $schema = read_text('./schema.sql');
    $db->do($schema) or die $db->errstr;
}

hook before_template_render => sub {
    my $tokens = shift;
    $tokens->{'css_url'} = request->base . 'css/style_1x.css';
    $tokens->{'login_url'} = uri_for('/login');
    $tokens->{'logout_url'} = uri_for('/logout');
};

get '/' => sub {
    my $db = connect_db();
    #my $sql = 'select id, parent, entryDate, category, title, text, status from entries order by id desc';
    my $sql = 'select id, parent, entryDate, title, entryDate, category, text, status from entries order by title desc';
    #my $sql = 'select id, parent, entryDate, title, text, status from entries where id in (\'1\',\'2\',\'17\') order by id desc';
    my $sth = $db->prepare($sql) or die $db->errstr;
    $sth->execute or die $sth->errstr;
   
    my $stha = $db->prepare($sql) or die $db->errstr;
    $stha->execute or die $sth->errstr;
 
    ###print "$sth->fetchall_hashref()\n\n";
    my $entries = $sth->fetchall_hashref('id');
    
    my $list = $stha->fetchall_arrayref();
    my $spectab = "<p><table><tr><td>dog</td><td>bat</td><td>cow</td></tr></table><p>\n";
    my $data = $entries;
     ###print Dumper $data;
     print Dumper \$list;
     print "Finished with dumping \$list.\n";
     ###
my $html = q{};
my @AoA = ();
%hash = ();
@AoA = @{ $list };
print Dumper \@AoA;
print "Finished Dumper \@AoA\n";
for_while_loop_2(@AoA);
#print "Dumper \%hash \n";
#print Dumper \%hash;
$html = style_ref_HoHoA_1_print_FH(\%hash,$html);
print "Dumper \%hash \n";
#print Dumper \%hash;
     ###
    template 'show_entries.tt', {
        'msg' => get_flash(),
        'add_entry_url' => uri_for('/add'),
     ###   'entries' => $sth->fetchall_hashref('id'),
          'entries' => $entries,
     #   'spectab' => $spectab,
        'html' => $html,
      
    };
};
###
get '/Dashboard2' => sub {
    my $db = connect_db();
       my $sql_title = 'select distinct title from entries order by title desc';
       my $sth_t = $db->prepare($sql_title) or die $db->errstr;
       $sth_t->execute or die $sth_t->errstr;
        my $title_ref = $sth_t->fetchall_arrayref();
        my @ToA;
        #print Dumper \$title_ref;
        my @title_test = @{ $title_ref };
        my $title_list =();
        for my $ti ( 0 .. $#title_test  ){
           print "$title_test[$ti][0]\n";
                my $value = $title_test[$ti][0];
                chomp($value);
                #$title_list .= $value."\n";
               push @ToA, $value;
            };
              #print Dumper \@title;
                # my $sql = "select id, parent, entryDate, title, entryDate, category, text, status from entries where title in ('Amazon','Rubrik','vRealize') order by title desc limit 26";
                my $sql = "select id, parent, entryDate, title, entryDate, category, text, status from entries order by title desc";
                my $sqlu = "select id, parent, entryDate, title, entryDate, category, text, status from entries where title = '";
                #my $suffix = "' order by title desc limit 3";
                my $suffix = "' order by id desc limit 3";
                  
                  print $sqlu,"\n";
                  print $suffix,"\n";
                  my @line =();
                  #my @ToA = qw/vRealize Amazon Rubrik/;
                  print Dumper \@ToA;
                  foreach my $title ( @ToA  ){
                              print "\$title:  $title\n";
                              my $sqlu = $sqlu.$title.$suffix;
                              print $sqlu,"\n";
                              my $sth_u = $db->prepare($sqlu) or die $db->errstr;
                              $sth_u->execute or die $sth_u->errstr;
                              my @out = $sth_u->fetchall_arrayref();
                               print "Dumper \@out\n";
                               print Dumper \@out;
                                for my $ik ( 0 .. $#out ){
                                     for my $il ( 0 .. $#{$out[$ik]} ){
                              push @line,  $out[$ik][$il] ;
                                     print "ZZZZZZZZZZZZZZZz  Dumper \$out[$ik][$il]\n";
                                     my $check = $out[$ik][$il];
                                     #print Dumper \$check;
                                    };
                                   };
                    #my $entries = $sth->fetchall_hashref('id');
                     };  
                print "---<Dumper \@line>---\n";
                print Dumper \@line;
########
          #my $sth = $db->prepare($sql) or die $db->errstr;
          #   $sth->execute or die $sth->errstr;
          #my $line = $sth->fetchall_arrayref();
          #my $entries = $sth->fetchall_hashref('id');
#####

          my $stha = $db->prepare($sql) or die $db->errstr;
             $stha->execute or die $stha->errstr;
    
          my $list = $stha->fetchall_arrayref();
            print "XXXXXXXXXXXXXXXXXx   Dumper \$list\n";
            print Dumper \$list;
 
          my $spectab = "<p><table><tr><td>dog</td><td>bat</td><td>cow</td></tr></table><p>\n";
          # my $data = $entries;
###            print Dumper \$list;
               ### print "Finished with dumping \$list.\n";
               my $html = q{};
               my @AoA = ();
               ###my $title_list ="<br><tt><p>TEST THIS DOG</p></tt><br>\n";
                %hash = ();
              ### @AoA = @{ $list };
                  @AoA = @line;
                print Dumper \@AoA;
                print "Finished Dumper \@AoA\n";

       for_while_loop_2(@AoA);
       $html = style_ref_HoHoA_1_print_FH(\%hash,$html);
       #print "Dumper \%hash \n";
       #print Dumper \%hash;
              template 'show_entries_dash.tt', {
                       'msg' => get_flash(),
                       'add_entry_url' => uri_for('/add'),
                       ###   'entries' => $sth->fetchall_hashref('id'),
                       ###   'entries' => $entries,
                       #'spectab' => $spectab,
                       #'spectab' => $title_list,
                       #'ToA' => \@ToA, 
                       'html' => $html
                  };
      #print Dumper \$entries;
      #print Dumper \@ToA;
};

###

###
get '/Dashboard' => sub {
    my $db = connect_db();
    my $sql_title = 'select distinct title from entries order by title desc';
    my $sth_t = $db->prepare($sql_title) or die $db->errstr;
    $sth_t->execute or die $sth_t->errstr;
    my @title = $sth_t->fetchall_arrayref();
     print Dumper \@title;
     for my $ti ( 0 .. $#title ){
           print "$title[$ti][0]\n";
             };
     #print Dumper \@title;
  

    my $sql = 'select id, parent, entryDate, title, entryDate, category, text, status from entries order by title desc';
     my $sth = $db->prepare($sql) or die $db->errstr;
     $sth->execute or die $sth->errstr;
   
    my $stha = $db->prepare($sql) or die $db->errstr;
     $stha->execute or die $sth->errstr;
     my $entries = $sth->fetchall_hashref('id');
    
    my $list = $stha->fetchall_arrayref();
    my $spectab = "<p><table><tr><td>dog</td><td>bat</td><td>cow</td></tr></table><p>\n";
    my $data = $entries;
     print Dumper \$list;
     print "Finished with dumping \$list.\n";
my $html = q{};
my @AoA = ();
%hash = ();
@AoA = @{ $list };
print Dumper \@AoA;
print "Finished Dumper \@AoA\n";
for_while_loop_2(@AoA);
$html = style_ref_HoHoA_1_print_FH(\%hash,$html);
print "Dumper \%hash \n";
#print Dumper \%hash;
    template 'show_entries_dash.tt', {
        'msg' => get_flash(),
        'add_entry_url' => uri_for('/add'),
     ###   'entries' => $sth->fetchall_hashref('id'),
     ###   'entries' => $entries,
     ###   'spectab' => $spectab,
        'html' => $html,
    };
};

###
get '/ALL' => sub {
    my $db = connect_db();
    #my $sql = 'select id, parent, entryDate, category, title, text, status from entries order by id desc';
    my $sql = 'select id, parent, entryDate, title, entryDate, category, text, status from entries order by title desc';
    #my $sql = 'select id, parent, entryDate, title, text, status from entries where id in (\'1\',\'2\',\'17\') order by id desc';
    my $sth = $db->prepare($sql) or die $db->errstr;
    $sth->execute or die $sth->errstr;
   
    my $stha = $db->prepare($sql) or die $db->errstr;
    $stha->execute or die $sth->errstr;
 
    ###print "$sth->fetchall_hashref()\n\n";
    my $entries = $sth->fetchall_hashref('id');
    
    my $list = $stha->fetchall_arrayref();
    my $spectab = "<p><table><tr><td>dog</td><td>bat</td><td>cow</td></tr></table><p>\n";
    my $data = $entries;
     ###print Dumper $data;
     print Dumper \$list;
     print "Finished with dumping \$list.\n";
     ###
my $html = q{};
my @AoA = ();
%hash = ();
@AoA = @{ $list };
print Dumper \@AoA;
print "Finished Dumper \@AoA\n";
for_while_loop_2(@AoA);
#print "Dumper \%hash \n";
#print Dumper \%hash;
$html = style_ref_HoHoA_1_print_FH(\%hash,$html);
print "Dumper \%hash \n";
#print Dumper \%hash;
     ###
    template 'show_entries.tt', {
        'msg' => get_flash(),
        'add_entry_url' => uri_for('/add'),
        ###'entries' => $sth->fetchall_hashref('id'),
        'entries' => $entries,
     #   'spectab' => $spectab,
        'html' => $html,
 };
};
###      
get '/Block' => sub {
    my $db = connect_db();
    my $sql = 'select id, parent, entryDate, category, title, text, status from entries order by id desc';
    my $sth = $db->prepare($sql) or die $db->errstr;
    $sth->execute or die $sth->errstr;
    template 'show_entries_block.tt', {
        'msg' => get_flash(),
        'add_entry_url' => uri_for('/addblock'),
        'entries' => $sth->fetchall_hashref('id'),
    };
};

post '/addblock' => sub {
    if ( not session('logged_in') ) {
        send_error("Not logged in", 401);
    }

### 
    my $string = params->{'text'};
    my @array = split(/\n/,$string);
    foreach my $item (@array){
        chomp($item);
        print "\$item: $item\n";
           my $clean = cleaner($item);
         # my($parent,$category,$title,$text) = split(/\;\s?/,$clean);
          my($parent,$entryDate,$category,$title,$text,$status) = split(/\;\s?/,$clean);
           chomp($parent);
           chomp($entryDate);
           chomp($category);
           chomp($title);
           chomp($text);
           chomp($status);
           my $db = connect_db();
           my $sql = 'insert into entries (parent, entryDate, title, category, text, status) values (?, ?, ?, ?, ?, ?)';
           #my $sql = 'insert into entries (parent, category, title, text) values (?, ?, ?, ?)';
           ###$my $sql = "insert into entries (parent, category, title, text) values ($parent,$category,$title,$text)";
           print "$sql\n";
           my $sth = $db->prepare($sql) or die $db->errstr;
           #$sth->execute(params->{'parent'},params->{'category'},params->{'title'}, params->{'text'}) or die $sth->errstr;
           ###$sth->execute($parent,$category,$title,$text) or die $sth->errstr;
           $sth->execute($parent,$entryDate,$title,$category,$text,$status) or die $sth->errstr;

            #$sth->execute or die $sth->errstr;

 };
###
    set_flash('New entry posted!');
    redirect '/';
};
###


post '/add' => sub {
    if ( not session('logged_in') ) {
        send_error("Not logged in", 401);
    }

    my $db = connect_db();
    #my $sql = 'insert into entries (parent, category, title, text) values (?, ?, ?, ?)';
    my $sql = 'insert into entries (parent, entryDate, title, category, text, status) values (?, ?, ?, ?, ?, ?)';
    my $sth = $db->prepare($sql) or die $db->errstr;
    ### $sth->execute(params->{'parent'},params->{'category'},params->{'title'}, params->{'text'}) or die $sth->errstr;
    $sth->execute(params->{'parent'},params->{'entryDate'},params->{'title'},params->{'category'},params->{'text'},params->{'status'}) or die $sth->errstr;

    set_flash('New entry posted!');
    redirect '/';
};

any ['get', 'post'] => '/login' => sub {
    my $err;

    if ( request->method() eq "POST" ) {

        if ( params->{'username'} ne setting('username') ) {
            $err = "Invalid username";
        }
        elsif ( params->{'password'} ne setting('password') ) {
            $err = "Invalid password";
        }
        else {
            session 'logged_in' => true;
            set_flash('You are logged in.');
            return redirect '/';
        }
   }

   template 'login.tt', {
       'err' => $err,
   };
};

get '/logout' => sub {
   app->destroy_session;
   set_flash('You are logged out.');
   redirect '/';
};

get '/ACC' => sub {
    send_file 'table_v2.html';
};

get '/BCC' => sub {
    send_file 'table_v3.html';
};


init_db();
start;
###

###true;

### SUBS
### subs to make unique db
sub cleaner2{
my($item)=@_;
 if($item =~ m/0xE2/g){
    print "found quote -replace with &quot\n";
    $item =~ s/0xE2/&quot/g;
  };
 print "cleaner: $item\n";
 return $item;
};

sub cleaner {
my($item) = @_;
 if ($item =~ s/[\x0a\x0d]//g){
   print "Found NL\n";
  };
 print "cleaner: $item\n";
 return $item;
};

sub testForFile {
 my($filename) = @_;
 my $uniqueDbName;
  print "Filename: $filename.\n";
  if (-f $filename) {
    print "File Exists!\n";
    open (my $fh, "$filename");
    my $line = <$fh>;
    chomp($line);
    $uniqueDbName = $line;
    print "DB name: $uniqueDbName.\n";
  } else {
    print "File does not exist. Making $filename\n";
    $uniqueDbName = createUniqueDbName();
    openFile($filename,$uniqueDbName);
  }
  return($uniqueDbName);
}

sub openFile {
  my($filename,$uniqueDbName) = @_;
  open( my $fh, ">","$filename") || die "Flaming death on creation of DB Flag file:$!\n";
  print "File open!\n";
  print $fh "$uniqueDbName\n";
  close $fh;
}

sub createUniqueDbName {
  my $time = time(); 
  my $rand = int(rand(10)); 
  my $name = "dancr_".$time.$rand.".db"; 
  print $name, "\n\n"; 
  return($name);
};

sub create_date {
  my($day, $month, $year)=(localtime)[3,4,5];
  # my $date = "$day-".($month+1)."-".($year+1900);
  my $date = ($month+1)."-"."$day-".($year+1900);
  # print "$date\n";
  return($date);
};

### subs to process format html output

sub evaluateLine {
print "SUB: evaluateLine\n";
my ($line,$ii) = @_;

my $actions = {
               'none' => sub { my $key = "1"; $hash{ $array[2] }{$key} = [ @array ]; },
               $hash{ $array[0] } => sub { $ii++; my $key = create_entry_time(); $key = $key + $ii; $hash{ $array[0] }{$key} = [ @array ]; },
               '_DEFAULT_' => sub { die "Unrecognized token '$_[0]'; aborting\n" }
};
###
  chomp($line);
 ### chomp($_[0]);
  print "\$line: $line\n";
  
  @array = split(/\;\s+/,$line);
  shift @array;  # remove first element
  my $type;
  if($array[0] =~ m/^(none)$/){
       $type = $1;
       print "$ii: \$type: $type | \$_[0]: $_[0] | \$array[0]: $array[0]\n";
   } else {
      print "$ii: \$type: not parent | \$_[0]: $_[0] | \$array[0]: $array[0]\n";
  };
       my $action = $actions->{$type}
             || $actions ->{$hash{ $array[0] }}
             || $actions ->{_DEFAULT_};
        $action->($array[0], $type, $actions);
print "SUB CL: evaluateLine\n";
};

sub for_while_loop_2{
print "SUB:  for_while_loop_2\n";
my(@AoA) = @_;

print "for_while Dumper\n";
###print Dumper \@AoA;
print "for_while Dumper\n";
my $jj = 1;
for my $i ( 0 .. $#AoA ){
    my $line;
    for my $j ( 0 .. $#{$AoA[$i]} ){
          if ( $j eq 0 ){
          $line = $AoA[$i][$j];
         } else {
           $line = $line."; ".$AoA[$i][$j];
        };
       chomp($line);
       $line = cleaner2($line)
     };
       print "$jj: $line\n";
       $jj++;
       evaluateLine($line,$jj);
       ###print Dumper \%hash;
   };
print "SUB CL:  for_while_loop_2\n";
};


sub style_ref_HoHoA_1_print_FH {
my($hash_ref,$html) = @_;
open  my ($fh), '>', \$html || die "Flaming death on open of $html: $! \n";
print "\n\n";
#print $fh "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n";
#print $fh "        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n";
#print $fh "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n";
#print $fh "<head>\n";
print $fh "<meta http-equiv=\"Content-type\" content=\"text/html; charset=<% settings.charset %>\" />\n";
print $fh "<title>CS Project Dashboard</title>\n";
### print $fh "<link rel=\"stylesheet\" href=\"http://10.80.8.12:443/css/style.css\" />\n";
print $fh "<!-- Grab jQuery from a CDN, fall back to local if necessary -->\n";
print $fh "<script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\n";
print $fh "<!-- End Comments -->\n";
print $fh "<style>\n";
print $fh "body {
    background-color: #ddd;
}
\n";
print $fh "\@media screen and (min-width: 480px) {
    body {
        background-color: cornflower;
    }
}\n";
print $fh "</style>\n";
my $big_string = "
    <!--
    <div class=page>
    -->
    <h1>CS Dashboard</h1>
       <div class=metanav>
    <!--
    </div>
    -->
  <ul class=entries>
  <table id=\"rounded-corner\" summary=\"Listing\"> 
\n";
#
print $fh "$big_string";
print $fh "<thead bgcolor=\"#ffd\">\n";
### print $fh "<tbody bgcolor=\"#ffd\">\n";
print $fh "<tr style=\"background-color:darkblue; color:white;\">\n";
print $fh "<td>Heading OR Date</td>\n";
#print $fh "<td>Date</td>\n";
print $fh "<td>Staff</td>\n";
print $fh "<td>Note</td>\n";
print $fh "<td>Status</td>\n";
print $fh "</tr>\n";
### print $fh "</tbody>\n";
print $fh "</thead>\n";
foreach my $key ( sort keys %$hash_ref ){
         print $fh "<!-- Start Heading -->\n";
         print $fh "<tbody>\n";
###         print $fh "<tr style=\"background-color:#E6E6FA; color:black;\">\n";
###
         print $fh "  <tr style=\"background-color:#E6E6FA;color:black;\" class=\"flip\"; style=\"color:black;\">\n";
###
         print $fh "<td rowspan=\"4\">$key</td>\n";
         print $fh "</tr>\n";
         print $fh "</tbody>\n";
          my $count = 0;
###
         print $fh "  <tbody class=\"section\" style=\"display:none;\" bgcolor=\"#ffd\">\n";
###

          foreach my $entry ( sort keys %{ $hash_ref->{$key} } ){
###
###         print $fh "  <tbody class=\"section\" style=\"display: none;\">\n";
###
                    if ( $count == 0 ){
                    print $fh "<!-- Start Listing  $#array $count-->\n";
  ###                   print $fh "  <tbody bgcolor=\"#ffd\">\n";
##                      print $fh "  <tr class=\"flip\"; style=\"background-color:lightblue;color:black;\">\n";
                       print $fh "  <tr style=\"background-color:yellow;color:black;\">\n";
                      $count++;
                       } elsif ( $count == 1 ){
                          print $fh "<!-- Flip Start $#array $count-->\n";
##                          print $fh "  <tbody class=\"section\" style=\"display:none;\">\n";
                          print $fh "  <tr style=\"background-color:lightblue;color:black\">\n";
                          $count++;
                        }  else {
                         #  print $fh "<!-- Flip Start $#array $count-->\n";
                         #  print $fh "  <tbody class=\"section\" style=\"display: none;\">\n";
                           print $fh "  <tr style=\"background-color:lightblue;color:black\">\n";
                           $count++;
                     };
              my @array =  $hash_ref->{$key}->{$entry} ;
                  for my $i ( 0 .. $#array ) {
                    for my $j ( 3 .. $#{ $array[$i] } ) {
                     print $fh "  <td>$array[$i][$j]</td>\n";
                   }
             print $fh " </tr>\n";
                };
                
      #       if ($count ==0 ){ print $fh " </tbody>\n"; }
   #          print $fh "<!-- End -->\n";
               # };
     print $fh "\n";
   };
     print $fh " </tbody>\n";
###
###   
     print $fh "<!-- End -->\n";
###     print $fh "<p>\n";

  };
#
my $script = "<script>
\$('.flip').click(function() {
    \$(this)
        .closest('tbody')
        .next('.section')
        .toggle('fast');
});
</script>
";
 print $fh "$script\n";
 print $fh "</table>\n";
 print $fh "</div>\n";
 print $fh "<div id=\"footer\">
Powered by <a href=\"http://perldancer.org/\">Dancer2</a> 0.205001
</div>\n";
 print $fh "</body>\n";
 print $fh "</html>\n";
 print $fh "\n\n";
 return ($html);
};

sub create_entry_time {
  my $entryTime = time();
  print $entryTime, "\n\n";
  return($entryTime);
};


true;
###
